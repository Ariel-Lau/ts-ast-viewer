export default {
    fileName: `/lib.es2015.promise.d.ts`,
    // File text is copyright Microsoft Corporation and is distributed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)
    text: `/// <reference no-default-lib="true"/>\ninterface PromiseConstructor{/**\n * A reference to the prototype.\n */readonly prototype:Promise<any>;/**\n * Creates a new Promise.\n * @param executor A callback used to initialize the promise. This callback is passed two arguments:\n * a resolve callback used resolve the promise with a value or the result of another promise,\n * and a reject callback used to reject the promise with a provided reason or error.\n */new <T>(executor:(resolve:(value?:T|PromiseLike<T>)=>void ,reject:(reason?:any)=>void )=>void ):Promise<T>;/**\n * Creates a Promise that is resolved with an array of results when all of the provided Promises\n * resolve, or rejected when any Promise is rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */all<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>,T6|PromiseLike<T6>,T7|PromiseLike<T7>,T8|PromiseLike<T8>,T9|PromiseLike<T9>,T10|PromiseLike<T10>]):Promise<[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10]>;/**\n * Creates a Promise that is resolved with an array of results when all of the provided Promises\n * resolve, or rejected when any Promise is rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */all<T1,T2,T3,T4,T5,T6,T7,T8,T9>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>,T6|PromiseLike<T6>,T7|PromiseLike<T7>,T8|PromiseLike<T8>,T9|PromiseLike<T9>]):Promise<[T1,T2,T3,T4,T5,T6,T7,T8,T9]>;/**\n * Creates a Promise that is resolved with an array of results when all of the provided Promises\n * resolve, or rejected when any Promise is rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */all<T1,T2,T3,T4,T5,T6,T7,T8>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>,T6|PromiseLike<T6>,T7|PromiseLike<T7>,T8|PromiseLike<T8>]):Promise<[T1,T2,T3,T4,T5,T6,T7,T8]>;/**\n * Creates a Promise that is resolved with an array of results when all of the provided Promises\n * resolve, or rejected when any Promise is rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */all<T1,T2,T3,T4,T5,T6,T7>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>,T6|PromiseLike<T6>,T7|PromiseLike<T7>]):Promise<[T1,T2,T3,T4,T5,T6,T7]>;/**\n * Creates a Promise that is resolved with an array of results when all of the provided Promises\n * resolve, or rejected when any Promise is rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */all<T1,T2,T3,T4,T5,T6>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>,T6|PromiseLike<T6>]):Promise<[T1,T2,T3,T4,T5,T6]>;/**\n * Creates a Promise that is resolved with an array of results when all of the provided Promises\n * resolve, or rejected when any Promise is rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */all<T1,T2,T3,T4,T5>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>]):Promise<[T1,T2,T3,T4,T5]>;/**\n * Creates a Promise that is resolved with an array of results when all of the provided Promises\n * resolve, or rejected when any Promise is rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */all<T1,T2,T3,T4>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>]):Promise<[T1,T2,T3,T4]>;/**\n * Creates a Promise that is resolved with an array of results when all of the provided Promises\n * resolve, or rejected when any Promise is rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */all<T1,T2,T3>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>]):Promise<[T1,T2,T3]>;/**\n * Creates a Promise that is resolved with an array of results when all of the provided Promises\n * resolve, or rejected when any Promise is rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */all<T1,T2>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>]):Promise<[T1,T2]>;/**\n * Creates a Promise that is resolved with an array of results when all of the provided Promises\n * resolve, or rejected when any Promise is rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */all<T>(values:(T|PromiseLike<T>)[]):Promise<T[]>;/**\n * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n * or rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */race<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>,T6|PromiseLike<T6>,T7|PromiseLike<T7>,T8|PromiseLike<T8>,T9|PromiseLike<T9>,T10|PromiseLike<T10>]):Promise<T1|T2|T3|T4|T5|T6|T7|T8|T9|T10>;/**\n * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n * or rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */race<T1,T2,T3,T4,T5,T6,T7,T8,T9>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>,T6|PromiseLike<T6>,T7|PromiseLike<T7>,T8|PromiseLike<T8>,T9|PromiseLike<T9>]):Promise<T1|T2|T3|T4|T5|T6|T7|T8|T9>;/**\n * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n * or rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */race<T1,T2,T3,T4,T5,T6,T7,T8>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>,T6|PromiseLike<T6>,T7|PromiseLike<T7>,T8|PromiseLike<T8>]):Promise<T1|T2|T3|T4|T5|T6|T7|T8>;/**\n * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n * or rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */race<T1,T2,T3,T4,T5,T6,T7>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>,T6|PromiseLike<T6>,T7|PromiseLike<T7>]):Promise<T1|T2|T3|T4|T5|T6|T7>;/**\n * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n * or rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */race<T1,T2,T3,T4,T5,T6>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>,T6|PromiseLike<T6>]):Promise<T1|T2|T3|T4|T5|T6>;/**\n * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n * or rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */race<T1,T2,T3,T4,T5>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>]):Promise<T1|T2|T3|T4|T5>;/**\n * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n * or rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */race<T1,T2,T3,T4>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>]):Promise<T1|T2|T3|T4>;/**\n * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n * or rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */race<T1,T2,T3>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>]):Promise<T1|T2|T3>;/**\n * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n * or rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */race<T1,T2>(values:[T1|PromiseLike<T1>,T2|PromiseLike<T2>]):Promise<T1|T2>;/**\n * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n * or rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */race<T>(values:(T|PromiseLike<T>)[]):Promise<T>;/**\n * Creates a new rejected promise for the provided reason.\n * @param reason The reason the promise was rejected.\n * @returns A new rejected Promise.\n */reject<T=never>(reason?:any):Promise<T>;/**\n * Creates a new resolved promise for the provided value.\n * @param value A promise.\n * @returns A promise whose internal state matches the provided promise.\n */resolve<T>(value:T|PromiseLike<T>):Promise<T>;/**\n * Creates a new resolved promise .\n * @returns A resolved promise.\n */resolve():Promise<void >;}declare var Promise:PromiseConstructor;`
};