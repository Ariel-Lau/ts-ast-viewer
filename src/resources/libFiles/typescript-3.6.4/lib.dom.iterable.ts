export default {
    fileName: `/lib.dom.iterable.d.ts`,
    // File text is copyright Microsoft Corporation and is distributed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)
    text: `/// <reference no-default-lib="true"/>\ninterface AudioParam{setValueCurveAtTime(values:Iterable<number >,startTime:number ,duration:number ):AudioParam;}interface AudioParamMapextends ReadonlyMap<string ,AudioParam>{}interface AudioTrackList{[Symbol.iterator]():IterableIterator<AudioTrack>;}interface BaseAudioContext{createIIRFilter(feedforward:Iterable<number >,feedback:Iterable<number >):IIRFilterNode;createPeriodicWave(real:Iterable<number >,imag:Iterable<number >,constraints?:PeriodicWaveConstraints):PeriodicWave;}interface CSSRuleList{[Symbol.iterator]():IterableIterator<CSSRule>;}interface CSSStyleDeclaration{[Symbol.iterator]():IterableIterator<string >;}interface Cache{addAll(requests:Iterable<RequestInfo>):Promise<void >;}interface CanvasPathDrawingStyles{setLineDash(segments:Iterable<number >):void ;}interface ClientRectList{[Symbol.iterator]():IterableIterator<ClientRect>;}interface DOMRectList{[Symbol.iterator]():IterableIterator<DOMRect>;}interface DOMStringList{[Symbol.iterator]():IterableIterator<string >;}interface DOMTokenList{[Symbol.iterator]():IterableIterator<string >;entries():IterableIterator<[number ,string ]>;keys():IterableIterator<number >;values():IterableIterator<string >;}interface DataTransferItemList{[Symbol.iterator]():IterableIterator<DataTransferItem>;}interface FileList{[Symbol.iterator]():IterableIterator<File>;}interface FormData{[Symbol.iterator]():IterableIterator<[string ,FormDataEntryValue]>;/**\n * Returns an array of key, value pairs for every entry in the list.\n */entries():IterableIterator<[string ,FormDataEntryValue]>;/**\n * Returns a list of keys in the list.\n */keys():IterableIterator<string >;/**\n * Returns a list of values in the list.\n */values():IterableIterator<FormDataEntryValue>;}interface HTMLAllCollection{[Symbol.iterator]():IterableIterator<Element>;}interface HTMLCollectionBase{[Symbol.iterator]():IterableIterator<Element>;}interface HTMLCollectionOf<Textends Element>{[Symbol.iterator]():IterableIterator<T>;}interface HTMLFormElement{[Symbol.iterator]():IterableIterator<Element>;}interface HTMLSelectElement{[Symbol.iterator]():IterableIterator<Element>;}interface Headers{[Symbol.iterator]():IterableIterator<[string ,string ]>;/**\n * Returns an iterator allowing to go through all key/value pairs contained in this object.\n */entries():IterableIterator<[string ,string ]>;/**\n * Returns an iterator allowing to go through all keys of the key/value pairs contained in this object.\n */keys():IterableIterator<string >;/**\n * Returns an iterator allowing to go through all values of the key/value pairs contained in this object.\n */values():IterableIterator<string >;}interface IDBObjectStore{/**\n * Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a "ConstraintError" DOMException.\n * \n * Throws an "InvalidStateError" DOMException if not called within an upgrade transaction.\n */createIndex(name:string ,keyPath:string |Iterable<string >,options?:IDBIndexParameters):IDBIndex;}interface MediaKeyStatusMap{[Symbol.iterator]():IterableIterator<[BufferSource,MediaKeyStatus]>;entries():IterableIterator<[BufferSource,MediaKeyStatus]>;keys():IterableIterator<BufferSource>;values():IterableIterator<MediaKeyStatus>;}interface MediaList{[Symbol.iterator]():IterableIterator<string >;}interface MimeTypeArray{[Symbol.iterator]():IterableIterator<MimeType>;}interface NamedNodeMap{[Symbol.iterator]():IterableIterator<Attr>;}interface Navigator{requestMediaKeySystemAccess(keySystem:string ,supportedConfigurations:Iterable<MediaKeySystemConfiguration>):Promise<MediaKeySystemAccess>;}interface NodeList{[Symbol.iterator]():IterableIterator<Node>;/**\n * Returns an array of key, value pairs for every entry in the list.\n */entries():IterableIterator<[number ,Node]>;/**\n * Returns an list of keys in the list.\n */keys():IterableIterator<number >;/**\n * Returns an list of values in the list.\n */values():IterableIterator<Node>;}interface NodeListOf<TNodeextends Node>{[Symbol.iterator]():IterableIterator<TNode>;/**\n * Returns an array of key, value pairs for every entry in the list.\n */entries():IterableIterator<[number ,TNode]>;/**\n * Returns an list of keys in the list.\n */keys():IterableIterator<number >;/**\n * Returns an list of values in the list.\n */values():IterableIterator<TNode>;}interface Plugin{[Symbol.iterator]():IterableIterator<MimeType>;}interface PluginArray{[Symbol.iterator]():IterableIterator<Plugin>;}interface RTCRtpTransceiver{setCodecPreferences(codecs:Iterable<RTCRtpCodecCapability>):void ;}interface RTCStatsReportextends ReadonlyMap<string ,any >{}interface SVGLengthList{[Symbol.iterator]():IterableIterator<SVGLength>;}interface SVGNumberList{[Symbol.iterator]():IterableIterator<SVGNumber>;}interface SVGPointList{[Symbol.iterator]():IterableIterator<DOMPoint>;}interface SVGStringList{[Symbol.iterator]():IterableIterator<string >;}interface SourceBufferList{[Symbol.iterator]():IterableIterator<SourceBuffer>;}interface SpeechGrammarList{[Symbol.iterator]():IterableIterator<SpeechGrammar>;}interface SpeechRecognitionResult{[Symbol.iterator]():IterableIterator<SpeechRecognitionAlternative>;}interface SpeechRecognitionResultList{[Symbol.iterator]():IterableIterator<SpeechRecognitionResult>;}interface StyleSheetList{[Symbol.iterator]():IterableIterator<StyleSheet>;}interface TextTrackCueList{[Symbol.iterator]():IterableIterator<TextTrackCue>;}interface TextTrackList{[Symbol.iterator]():IterableIterator<TextTrack>;}interface TouchList{[Symbol.iterator]():IterableIterator<Touch>;}interface URLSearchParams{[Symbol.iterator]():IterableIterator<[string ,string ]>;/**\n * Returns an array of key, value pairs for every entry in the search params.\n */entries():IterableIterator<[string ,string ]>;/**\n * Returns a list of keys in the search params.\n */keys():IterableIterator<string >;/**\n * Returns a list of values in the search params.\n */values():IterableIterator<string >;}interface VRDisplay{requestPresent(layers:Iterable<VRLayer>):Promise<void >;}interface VideoTrackList{[Symbol.iterator]():IterableIterator<VideoTrack>;}interface WEBGL_draw_buffers{drawBuffersWEBGL(buffers:Iterable<GLenum>):void ;}interface WebAuthentication{makeCredential(accountInformation:Account,cryptoParameters:Iterable<ScopedCredentialParameters>,attestationChallenge:Int8Array|Int16Array|Int32Array|Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray|Float32Array|Float64Array|DataView|ArrayBuffer|null ,options?:ScopedCredentialOptions):Promise<ScopedCredentialInfo>;}interface WebGL2RenderingContextBase{invalidateFramebuffer(target:GLenum,attachments:Iterable<GLenum>):void ;invalidateSubFramebuffer(target:GLenum,attachments:Iterable<GLenum>,x:GLint,y:GLint,width:GLsizei,height:GLsizei):void ;uniform1uiv(location:WebGLUniformLocation|null ,data:Iterable<GLuint>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniform2uiv(location:WebGLUniformLocation|null ,data:Iterable<GLuint>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniform3uiv(location:WebGLUniformLocation|null ,data:Iterable<GLuint>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniform4uiv(location:WebGLUniformLocation|null ,data:Iterable<GLuint>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniformMatrix3x2fv(location:WebGLUniformLocation|null ,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniformMatrix4x2fv(location:WebGLUniformLocation|null ,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniformMatrix2x3fv(location:WebGLUniformLocation|null ,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniformMatrix4x3fv(location:WebGLUniformLocation|null ,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniformMatrix2x4fv(location:WebGLUniformLocation|null ,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniformMatrix3x4fv(location:WebGLUniformLocation|null ,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void ;vertexAttribI4iv(index:GLuint,values:Iterable<GLint>):void ;vertexAttribI4uiv(index:GLuint,values:Iterable<GLuint>):void ;drawBuffers(buffers:Iterable<GLenum>):void ;clearBufferfv(buffer:GLenum,drawbuffer:GLint,values:Iterable<GLfloat>,srcOffset?:GLuint):void ;clearBufferiv(buffer:GLenum,drawbuffer:GLint,values:Iterable<GLint>,srcOffset?:GLuint):void ;clearBufferuiv(buffer:GLenum,drawbuffer:GLint,values:Iterable<GLuint>,srcOffset?:GLuint):void ;transformFeedbackVaryings(program:WebGLProgram,varyings:Iterable<string >,bufferMode:GLenum):void ;getUniformIndices(program:WebGLProgram,uniformNames:Iterable<string >):Iterable<GLuint>|null ;getActiveUniforms(program:WebGLProgram,uniformIndices:Iterable<GLuint>,pname:GLenum):any ;}interface WebGL2RenderingContextOverloads{uniform1fv(location:WebGLUniformLocation|null ,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniform2fv(location:WebGLUniformLocation|null ,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniform3fv(location:WebGLUniformLocation|null ,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniform4fv(location:WebGLUniformLocation|null ,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniform1iv(location:WebGLUniformLocation|null ,data:Iterable<GLint>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniform2iv(location:WebGLUniformLocation|null ,data:Iterable<GLint>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniform3iv(location:WebGLUniformLocation|null ,data:Iterable<GLint>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniform4iv(location:WebGLUniformLocation|null ,data:Iterable<GLint>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniformMatrix2fv(location:WebGLUniformLocation|null ,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniformMatrix3fv(location:WebGLUniformLocation|null ,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void ;uniformMatrix4fv(location:WebGLUniformLocation|null ,transpose:GLboolean,data:Iterable<GLfloat>,srcOffset?:GLuint,srcLength?:GLuint):void ;}interface WebGLRenderingContextBase{vertexAttrib1fv(index:GLuint,values:Iterable<GLfloat>):void ;vertexAttrib2fv(index:GLuint,values:Iterable<GLfloat>):void ;vertexAttrib3fv(index:GLuint,values:Iterable<GLfloat>):void ;vertexAttrib4fv(index:GLuint,values:Iterable<GLfloat>):void ;}interface WebGLRenderingContextOverloads{uniform1fv(location:WebGLUniformLocation|null ,v:Iterable<GLfloat>):void ;uniform2fv(location:WebGLUniformLocation|null ,v:Iterable<GLfloat>):void ;uniform3fv(location:WebGLUniformLocation|null ,v:Iterable<GLfloat>):void ;uniform4fv(location:WebGLUniformLocation|null ,v:Iterable<GLfloat>):void ;uniform1iv(location:WebGLUniformLocation|null ,v:Iterable<GLint>):void ;uniform2iv(location:WebGLUniformLocation|null ,v:Iterable<GLint>):void ;uniform3iv(location:WebGLUniformLocation|null ,v:Iterable<GLint>):void ;uniform4iv(location:WebGLUniformLocation|null ,v:Iterable<GLint>):void ;uniformMatrix2fv(location:WebGLUniformLocation|null ,transpose:GLboolean,value:Iterable<GLfloat>):void ;uniformMatrix3fv(location:WebGLUniformLocation|null ,transpose:GLboolean,value:Iterable<GLfloat>):void ;uniformMatrix4fv(location:WebGLUniformLocation|null ,transpose:GLboolean,value:Iterable<GLfloat>):void ;}`
};