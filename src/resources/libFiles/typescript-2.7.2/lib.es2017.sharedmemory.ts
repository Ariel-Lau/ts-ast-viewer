export default {
    fileName: `/lib.es2017.sharedmemory.d.ts`,
    // File text is copyright Microsoft Corporation and is distributed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)
    text: `/// <reference no-default-lib="true"/>\n/// <reference path="lib.es2015.symbol.d.ts" />\n/// <reference path="lib.es2015.symbol.wellknown.d.ts" />\ninterface SharedArrayBuffer{/**\n * Read-only. The length of the ArrayBuffer (in bytes).\n */readonly byteLength:number;length:number;/**\n * Returns a section of an SharedArrayBuffer.\n */slice(begin:number,end?:number):SharedArrayBuffer;readonly [Symbol.species]:SharedArrayBuffer;readonly [Symbol.toStringTag]:"SharedArrayBuffer";}interface SharedArrayBufferConstructor{readonly prototype:SharedArrayBuffer;new (byteLength:number):SharedArrayBuffer;}declare var SharedArrayBuffer:SharedArrayBufferConstructor;interface ArrayBufferTypes{SharedArrayBuffer:SharedArrayBuffer;}interface Atomics{/**\n * Adds a value to the value at the given position in the array, returning the original value.\n * Until this atomic operation completes, any other read or write operation against the array\n * will block.\n */add(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;/**\n * Stores the bitwise AND of a value with the value at the given position in the array,\n * returning the original value. Until this atomic operation completes, any other read or\n * write operation against the array will block.\n */and(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;/**\n * Replaces the value at the given position in the array if the original value equals the given\n * expected value, returning the original value. Until this atomic operation completes, any\n * other read or write operation against the array will block.\n */compareExchange(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,expectedValue:number,replacementValue:number):number;/**\n * Replaces the value at the given position in the array, returning the original value. Until\n * this atomic operation completes, any other read or write operation against the array will\n * block.\n */exchange(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;/**\n * Returns a value indicating whether high-performance algorithms can use atomic operations\n * (\`true\`) or must use locks (\`false\`) for the given number of bytes-per-element of a typed\n * array.\n */isLockFree(size:number):boolean;/**\n * Returns the value at the given position in the array. Until this atomic operation completes,\n * any other read or write operation against the array will block.\n */load(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number):number;/**\n * Stores the bitwise OR of a value with the value at the given position in the array,\n * returning the original value. Until this atomic operation completes, any other read or write\n * operation against the array will block.\n */or(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;/**\n * Stores a value at the given position in the array, returning the new value. Until this\n * atomic operation completes, any other read or write operation against the array will block.\n */store(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;/**\n * Subtracts a value from the value at the given position in the array, returning the original\n * value. Until this atomic operation completes, any other read or write operation against the\n * array will block.\n */sub(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;/**\n * If the value at the given position in the array is equal to the provided value, the current\n * agent is put to sleep causing execution to suspend until the timeout expires (returning\n * \`"timed-out"\`) or until the agent is awoken (returning \`"ok"\`); otherwise, returns\n * \`"not-equal"\`.\n */wait(typedArray:Int32Array,index:number,value:number,timeout?:number):"ok"|"not-equal"|"timed-out";/**\n * Wakes up sleeping agents that are waiting on the given index of the array, returning the\n * number of agents that were awoken.\n */wake(typedArray:Int32Array,index:number,count:number):number;/**\n * Stores the bitwise XOR of a value with the value at the given position in the array,\n * returning the original value. Until this atomic operation completes, any other read or write\n * operation against the array will block.\n */xor(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;readonly [Symbol.toStringTag]:"Atomics";}declare var Atomics:Atomics;`
};