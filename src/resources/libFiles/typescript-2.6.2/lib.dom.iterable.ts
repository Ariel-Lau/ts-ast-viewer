export default {
    fileName: `/lib.dom.iterable.d.ts`,
    // File text is copyright Microsoft Corporation and is distributed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)
    text: `/// <reference no-default-lib="true"/>\n/// <reference path="lib.dom.d.ts" />\ninterface DOMTokenList{[Symbol.iterator]():IterableIterator<string >;}interface FormData{/**\n * Returns an array of key, value pairs for every entry in the list\n */entries():IterableIterator<[string ,string |File]>;/**\n * Returns a list of keys in the list\n */keys():IterableIterator<string >;/**\n * Returns a list of values in the list\n */values():IterableIterator<string |File>;[Symbol.iterator]():IterableIterator<string |File>;}interface Headers{[Symbol.iterator]():IterableIterator<[string ,string ]>;/**\n * Returns an iterator allowing to go through all key/value pairs contained in this object.\n */entries():IterableIterator<[string ,string ]>;/**\n * Returns an iterator allowing to go through all keys f the key/value pairs contained in this object.\n */keys():IterableIterator<string >;/**\n * Returns an iterator allowing to go through all values of the key/value pairs contained in this object.\n */values():IterableIterator<string >;}interface NodeList{/**\n * Returns an array of key, value pairs for every entry in the list\n */entries():IterableIterator<[number ,Node]>;/**\n * Performs the specified action for each node in an list.\n * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the list.\n * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n */forEach(callbackfn:(value:Node,index:number ,listObj:NodeList)=>void ,thisArg?:any ):void ;/**\n * Returns an list of keys in the list\n */keys():IterableIterator<number >;/**\n * Returns an list of values in the list\n */values():IterableIterator<Node>;[Symbol.iterator]():IterableIterator<Node>;}interface NodeListOf<TNodeextends Node>{/**\n * Returns an array of key, value pairs for every entry in the list\n */entries():IterableIterator<[number ,TNode]>;/**\n * Performs the specified action for each node in an list.\n * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the list.\n * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n */forEach(callbackfn:(value:TNode,index:number ,listObj:NodeListOf<TNode>)=>void ,thisArg?:any ):void ;/**\n * Returns an list of keys in the list\n */keys():IterableIterator<number >;/**\n * Returns an list of values in the list\n */values():IterableIterator<TNode>;[Symbol.iterator]():IterableIterator<TNode>;}interface URLSearchParams{/**\n * Returns an array of key, value pairs for every entry in the search params\n */entries():IterableIterator<[string ,string ]>;/**\n * Returns a list of keys in the search params\n */keys():IterableIterator<string >;/**\n * Returns a list of values in the search params\n */values():IterableIterator<string >;/**\n * iterate over key/value pairs\n */[Symbol.iterator]():IterableIterator<[string ,string ]>;}`
};