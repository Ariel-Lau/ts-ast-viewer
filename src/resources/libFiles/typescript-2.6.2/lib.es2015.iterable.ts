export default {
    fileName: `/lib.es2015.iterable.d.ts`,
    // File text is copyright Microsoft Corporation and is distributed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)
    text: `/// <reference no-default-lib="true"/>\n/// <reference path="lib.es2015.symbol.d.ts" />\ninterface SymbolConstructor{/**\n * A method that returns the default iterator for an object. Called by the semantics of the\n * for-of statement.\n */readonly iterator:symbol ;}interface IteratorResult<T>{done:boolean ;value:T;}interface Iterator<T>{next(value?:any ):IteratorResult<T>;return ?(value?:any ):IteratorResult<T>;throw ?(e?:any ):IteratorResult<T>;}interface Iterable<T>{[Symbol.iterator]():Iterator<T>;}interface IterableIterator<T>extends Iterator<T>{[Symbol.iterator]():IterableIterator<T>;}interface Array<T>{/** Iterator */[Symbol.iterator]():IterableIterator<T>;/**\n * Returns an iterable of key, value pairs for every entry in the array\n */entries():IterableIterator<[number ,T]>;/**\n * Returns an iterable of keys in the array\n */keys():IterableIterator<number >;/**\n * Returns an iterable of values in the array\n */values():IterableIterator<T>;}interface ArrayConstructor{/**\n * Creates an array from an iterable object.\n * @param iterable An iterable object to convert to an array.\n * @param mapfn A mapping function to call on every element of the array.\n * @param thisArg Value of 'this' used to invoke the mapfn.\n */from <T,U=T>(iterable:Iterable<T>,mapfn?:(v:T,k:number )=>U,thisArg?:any ):U[];}interface ReadonlyArray<T>{/** Iterator of values in the array. */[Symbol.iterator]():IterableIterator<T>;/**\n * Returns an iterable of key, value pairs for every entry in the array\n */entries():IterableIterator<[number ,T]>;/**\n * Returns an iterable of keys in the array\n */keys():IterableIterator<number >;/**\n * Returns an iterable of values in the array\n */values():IterableIterator<T>;}interface IArguments{/** Iterator */[Symbol.iterator]():IterableIterator<any >;}interface Map<K,V>{/** Returns an iterable of entries in the map. */[Symbol.iterator]():IterableIterator<[K,V]>;/**\n * Returns an iterable of key, value pairs for every entry in the map.\n */entries():IterableIterator<[K,V]>;/**\n * Returns an iterable of keys in the map\n */keys():IterableIterator<K>;/**\n * Returns an iterable of values in the map\n */values():IterableIterator<V>;}interface ReadonlyMap<K,V>{/** Returns an iterable of entries in the map. */[Symbol.iterator]():IterableIterator<[K,V]>;/**\n * Returns an iterable of key, value pairs for every entry in the map.\n */entries():IterableIterator<[K,V]>;/**\n * Returns an iterable of keys in the map\n */keys():IterableIterator<K>;/**\n * Returns an iterable of values in the map\n */values():IterableIterator<V>;}interface MapConstructor{new <K,V>(iterable:Iterable<[K,V]>):Map<K,V>;}interface WeakMap<Kextends object ,V>{}interface WeakMapConstructor{new <Kextends object ,V>(iterable:Iterable<[K,V]>):WeakMap<K,V>;}interface Set<T>{/** Iterates over values in the set. */[Symbol.iterator]():IterableIterator<T>;/**\n * Returns an iterable of [v,v] pairs for every value \`v\` in the set.\n */entries():IterableIterator<[T,T]>;/**\n * Despite its name, returns an iterable of the values in the set,\n */keys():IterableIterator<T>;/**\n * Returns an iterable of values in the set.\n */values():IterableIterator<T>;}interface ReadonlySet<T>{/** Iterates over values in the set. */[Symbol.iterator]():IterableIterator<T>;/**\n * Returns an iterable of [v,v] pairs for every value \`v\` in the set.\n */entries():IterableIterator<[T,T]>;/**\n * Despite its name, returns an iterable of the values in the set,\n */keys():IterableIterator<T>;/**\n * Returns an iterable of values in the set.\n */values():IterableIterator<T>;}interface SetConstructor{new <T>(iterable:Iterable<T>):Set<T>;}interface WeakSet<T>{}interface WeakSetConstructor{new <Textends object >(iterable:Iterable<T>):WeakSet<T>;}interface Promise<T>{}interface PromiseConstructor{/**\n * Creates a Promise that is resolved with an array of results when all of the provided Promises\n * resolve, or rejected when any Promise is rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */all<TAll>(values:Iterable<TAll|PromiseLike<TAll>>):Promise<TAll[]>;/**\n * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n * or rejected.\n * @param values An array of Promises.\n * @returns A new Promise.\n */race<T>(values:Iterable<T|PromiseLike<T>>):Promise<T>;}declare namespace Reflect{function enumerate(target:object ):IterableIterator<any >;}interface String{/** Iterator */[Symbol.iterator]():IterableIterator<string >;}interface Int8Array{[Symbol.iterator]():IterableIterator<number >;/**\n * Returns an array of key, value pairs for every entry in the array\n */entries():IterableIterator<[number ,number ]>;/**\n * Returns an list of keys in the array\n */keys():IterableIterator<number >;/**\n * Returns an list of values in the array\n */values():IterableIterator<number >;}interface Int8ArrayConstructor{new (elements:Iterable<number >):Int8Array;/**\n * Creates an array from an array-like or iterable object.\n * @param arrayLike An array-like or iterable object to convert to an array.\n * @param mapfn A mapping function to call on every element of the array.\n * @param thisArg Value of 'this' used to invoke the mapfn.\n */from (arrayLike:Iterable<number >,mapfn?:(v:number ,k:number )=>number ,thisArg?:any ):Int8Array;}interface Uint8Array{[Symbol.iterator]():IterableIterator<number >;/**\n * Returns an array of key, value pairs for every entry in the array\n */entries():IterableIterator<[number ,number ]>;/**\n * Returns an list of keys in the array\n */keys():IterableIterator<number >;/**\n * Returns an list of values in the array\n */values():IterableIterator<number >;}interface Uint8ArrayConstructor{new (elements:Iterable<number >):Uint8Array;/**\n * Creates an array from an array-like or iterable object.\n * @param arrayLike An array-like or iterable object to convert to an array.\n * @param mapfn A mapping function to call on every element of the array.\n * @param thisArg Value of 'this' used to invoke the mapfn.\n */from (arrayLike:Iterable<number >,mapfn?:(v:number ,k:number )=>number ,thisArg?:any ):Uint8Array;}interface Uint8ClampedArray{[Symbol.iterator]():IterableIterator<number >;/**\n * Returns an array of key, value pairs for every entry in the array\n */entries():IterableIterator<[number ,number ]>;/**\n * Returns an list of keys in the array\n */keys():IterableIterator<number >;/**\n * Returns an list of values in the array\n */values():IterableIterator<number >;}interface Uint8ClampedArrayConstructor{new (elements:Iterable<number >):Uint8ClampedArray;/**\n * Creates an array from an array-like or iterable object.\n * @param arrayLike An array-like or iterable object to convert to an array.\n * @param mapfn A mapping function to call on every element of the array.\n * @param thisArg Value of 'this' used to invoke the mapfn.\n */from (arrayLike:Iterable<number >,mapfn?:(v:number ,k:number )=>number ,thisArg?:any ):Uint8ClampedArray;}interface Int16Array{[Symbol.iterator]():IterableIterator<number >;/**\n * Returns an array of key, value pairs for every entry in the array\n */entries():IterableIterator<[number ,number ]>;/**\n * Returns an list of keys in the array\n */keys():IterableIterator<number >;/**\n * Returns an list of values in the array\n */values():IterableIterator<number >;}interface Int16ArrayConstructor{new (elements:Iterable<number >):Int16Array;/**\n * Creates an array from an array-like or iterable object.\n * @param arrayLike An array-like or iterable object to convert to an array.\n * @param mapfn A mapping function to call on every element of the array.\n * @param thisArg Value of 'this' used to invoke the mapfn.\n */from (arrayLike:Iterable<number >,mapfn?:(v:number ,k:number )=>number ,thisArg?:any ):Int16Array;}interface Uint16Array{[Symbol.iterator]():IterableIterator<number >;/**\n * Returns an array of key, value pairs for every entry in the array\n */entries():IterableIterator<[number ,number ]>;/**\n * Returns an list of keys in the array\n */keys():IterableIterator<number >;/**\n * Returns an list of values in the array\n */values():IterableIterator<number >;}interface Uint16ArrayConstructor{new (elements:Iterable<number >):Uint16Array;/**\n * Creates an array from an array-like or iterable object.\n * @param arrayLike An array-like or iterable object to convert to an array.\n * @param mapfn A mapping function to call on every element of the array.\n * @param thisArg Value of 'this' used to invoke the mapfn.\n */from (arrayLike:Iterable<number >,mapfn?:(v:number ,k:number )=>number ,thisArg?:any ):Uint16Array;}interface Int32Array{[Symbol.iterator]():IterableIterator<number >;/**\n * Returns an array of key, value pairs for every entry in the array\n */entries():IterableIterator<[number ,number ]>;/**\n * Returns an list of keys in the array\n */keys():IterableIterator<number >;/**\n * Returns an list of values in the array\n */values():IterableIterator<number >;}interface Int32ArrayConstructor{new (elements:Iterable<number >):Int32Array;/**\n * Creates an array from an array-like or iterable object.\n * @param arrayLike An array-like or iterable object to convert to an array.\n * @param mapfn A mapping function to call on every element of the array.\n * @param thisArg Value of 'this' used to invoke the mapfn.\n */from (arrayLike:Iterable<number >,mapfn?:(v:number ,k:number )=>number ,thisArg?:any ):Int32Array;}interface Uint32Array{[Symbol.iterator]():IterableIterator<number >;/**\n * Returns an array of key, value pairs for every entry in the array\n */entries():IterableIterator<[number ,number ]>;/**\n * Returns an list of keys in the array\n */keys():IterableIterator<number >;/**\n * Returns an list of values in the array\n */values():IterableIterator<number >;}interface Uint32ArrayConstructor{new (elements:Iterable<number >):Uint32Array;/**\n * Creates an array from an array-like or iterable object.\n * @param arrayLike An array-like or iterable object to convert to an array.\n * @param mapfn A mapping function to call on every element of the array.\n * @param thisArg Value of 'this' used to invoke the mapfn.\n */from (arrayLike:Iterable<number >,mapfn?:(v:number ,k:number )=>number ,thisArg?:any ):Uint32Array;}interface Float32Array{[Symbol.iterator]():IterableIterator<number >;/**\n * Returns an array of key, value pairs for every entry in the array\n */entries():IterableIterator<[number ,number ]>;/**\n * Returns an list of keys in the array\n */keys():IterableIterator<number >;/**\n * Returns an list of values in the array\n */values():IterableIterator<number >;}interface Float32ArrayConstructor{new (elements:Iterable<number >):Float32Array;/**\n * Creates an array from an array-like or iterable object.\n * @param arrayLike An array-like or iterable object to convert to an array.\n * @param mapfn A mapping function to call on every element of the array.\n * @param thisArg Value of 'this' used to invoke the mapfn.\n */from (arrayLike:Iterable<number >,mapfn?:(v:number ,k:number )=>number ,thisArg?:any ):Float32Array;}interface Float64Array{[Symbol.iterator]():IterableIterator<number >;/**\n * Returns an array of key, value pairs for every entry in the array\n */entries():IterableIterator<[number ,number ]>;/**\n * Returns an list of keys in the array\n */keys():IterableIterator<number >;/**\n * Returns an list of values in the array\n */values():IterableIterator<number >;}interface Float64ArrayConstructor{new (elements:Iterable<number >):Float64Array;/**\n * Creates an array from an array-like or iterable object.\n * @param arrayLike An array-like or iterable object to convert to an array.\n * @param mapfn A mapping function to call on every element of the array.\n * @param thisArg Value of 'this' used to invoke the mapfn.\n */from (arrayLike:Iterable<number >,mapfn?:(v:number ,k:number )=>number ,thisArg?:any ):Float64Array;}`
};