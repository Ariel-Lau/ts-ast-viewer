export default {
    fileName: `/lib.es2015.symbol.wellknown.d.ts`,
    // File text is copyright Microsoft Corporation and is distributed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)
    text: `/// <reference no-default-lib="true"/>\n/// <reference lib="es2015.symbol" />\ninterface SymbolConstructor{/**\n * A method that determines if a constructor object recognizes an object as one of the\n * constructorâ€™s instances. Called by the semantics of the instanceof operator.\n */readonly hasInstance:symbol ;/**\n * A Boolean value that if true indicates that an object should flatten to its array elements\n * by Array.prototype.concat.\n */readonly isConcatSpreadable:symbol ;/**\n * A regular expression method that matches the regular expression against a string. Called\n * by the String.prototype.match method.\n */readonly match:symbol ;/**\n * A regular expression method that replaces matched substrings of a string. Called by the\n * String.prototype.replace method.\n */readonly replace:symbol ;/**\n * A regular expression method that returns the index within a string that matches the\n * regular expression. Called by the String.prototype.search method.\n */readonly search:symbol ;/**\n * A function valued property that is the constructor function that is used to create\n * derived objects.\n */readonly species:symbol ;/**\n * A regular expression method that splits a string at the indices that match the regular\n * expression. Called by the String.prototype.split method.\n */readonly split:symbol ;/**\n * A method that converts an object to a corresponding primitive value.\n * Called by the ToPrimitive abstract operation.\n */readonly toPrimitive:symbol ;/**\n * A String value that is used in the creation of the default string description of an object.\n * Called by the built-in method Object.prototype.toString.\n */readonly toStringTag:symbol ;/**\n * An Object whose own property names are property names that are excluded from the 'with'\n * environment bindings of the associated objects.\n */readonly unscopables:symbol ;}interface Symbol{readonly [Symbol.toStringTag]:string ;}interface Array<T>{/**\n * Returns an object whose properties have the value 'true'\n * when they will be absent when used in a 'with' statement.\n */[Symbol.unscopables]():{copyWithin:boolean ;entries:boolean ;fill:boolean ;find:boolean ;findIndex:boolean ;keys:boolean ;values:boolean ;};}interface Date{/**\n * Converts a Date object to a string.\n */[Symbol.toPrimitive](hint:"default"):string ;/**\n * Converts a Date object to a string.\n */[Symbol.toPrimitive](hint:"string"):string ;/**\n * Converts a Date object to a number.\n */[Symbol.toPrimitive](hint:"number"):number ;/**\n * Converts a Date object to a string or number.\n *\n * @param hint The strings "number", "string", or "default" to specify what primitive to return.\n *\n * @throws {TypeError} If 'hint' was given something other than "number", "string", or "default".\n * @returns A number if 'hint' was "number", a string if 'hint' was "string" or "default".\n */[Symbol.toPrimitive](hint:string ):string |number ;}interface Map<K,V>{readonly [Symbol.toStringTag]:string ;}interface WeakMap<Kextends object ,V>{readonly [Symbol.toStringTag]:string ;}interface Set<T>{readonly [Symbol.toStringTag]:string ;}interface WeakSet<Textends object >{readonly [Symbol.toStringTag]:string ;}interface JSON{readonly [Symbol.toStringTag]:string ;}interface Function{/**\n * Determines whether the given value inherits from this function if this function was used\n * as a constructor function.\n *\n * A constructor function can control which objects are recognized as its instances by\n * 'instanceof' by overriding this method.\n */[Symbol.hasInstance](value:any ):boolean ;}interface GeneratorFunction{readonly [Symbol.toStringTag]:string ;}interface Math{readonly [Symbol.toStringTag]:string ;}interface Promise<T>{readonly [Symbol.toStringTag]:string ;}interface PromiseConstructor{readonly [Symbol.species]:PromiseConstructor;}interface RegExp{/**\n * Matches a string with this regular expression, and returns an array containing the results of\n * that search.\n * @param string A string to search within.\n */[Symbol.match](string :string ):RegExpMatchArray|null ;/**\n * Replaces text in a string, using this regular expression.\n * @param string A String object or string literal whose contents matching against\n *               this regular expression will be replaced\n * @param replaceValue A String object or string literal containing the text to replace for every\n *                     successful match of this regular expression.\n */[Symbol.replace](string :string ,replaceValue:string ):string ;/**\n * Replaces text in a string, using this regular expression.\n * @param string A String object or string literal whose contents matching against\n *               this regular expression will be replaced\n * @param replacer A function that returns the replacement text.\n */[Symbol.replace](string :string ,replacer:(substring:string ,...args:any [])=>string ):string ;/**\n * Finds the position beginning first substring match in a regular expression search\n * using this regular expression.\n *\n * @param string The string to search within.\n */[Symbol.search](string :string ):number ;/**\n * Returns an array of substrings that were delimited by strings in the original input that\n * match against this regular expression.\n *\n * If the regular expression contains capturing parentheses, then each time this\n * regular expression matches, the results (including any undefined results) of the\n * capturing parentheses are spliced.\n *\n * @param string string value to split\n * @param limit if not undefined, the output array is truncated so that it contains no more\n * than 'limit' elements.\n */[Symbol.split](string :string ,limit?:number ):string [];}interface RegExpConstructor{readonly [Symbol.species]:RegExpConstructor;}interface String{/**\n * Matches a string an object that supports being matched against, and returns an array containing the results of that search.\n * @param matcher An object that supports being matched against.\n */match(matcher:{[Symbol.match](string :string ):RegExpMatchArray|null ;}):RegExpMatchArray|null ;/**\n * Replaces text in a string, using an object that supports replacement within a string.\n * @param searchValue A object can search for and replace matches within a string.\n * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n */replace(searchValue:{[Symbol.replace](string :string ,replaceValue:string ):string ;},replaceValue:string ):string ;/**\n * Replaces text in a string, using an object that supports replacement within a string.\n * @param searchValue A object can search for and replace matches within a string.\n * @param replacer A function that returns the replacement text.\n */replace(searchValue:{[Symbol.replace](string :string ,replacer:(substring:string ,...args:any [])=>string ):string ;},replacer:(substring:string ,...args:any [])=>string ):string ;/**\n * Finds the first substring match in a regular expression search.\n * @param searcher An object which supports searching within a string.\n */search(searcher:{[Symbol.search](string :string ):number ;}):number ;/**\n * Split a string into substrings using the specified separator and return them as an array.\n * @param splitter An object that can split a string.\n * @param limit A value used to limit the number of elements returned in the array.\n */split(splitter:{[Symbol.split](string :string ,limit?:number ):string [];},limit?:number ):string [];}interface ArrayBuffer{readonly [Symbol.toStringTag]:string ;}interface DataView{readonly [Symbol.toStringTag]:string ;}interface Int8Array{readonly [Symbol.toStringTag]:"Int8Array";}interface Uint8Array{readonly [Symbol.toStringTag]:"UInt8Array";}interface Uint8ClampedArray{readonly [Symbol.toStringTag]:"Uint8ClampedArray";}interface Int16Array{readonly [Symbol.toStringTag]:"Int16Array";}interface Uint16Array{readonly [Symbol.toStringTag]:"Uint16Array";}interface Int32Array{readonly [Symbol.toStringTag]:"Int32Array";}interface Uint32Array{readonly [Symbol.toStringTag]:"Uint32Array";}interface Float32Array{readonly [Symbol.toStringTag]:"Float32Array";}interface Float64Array{readonly [Symbol.toStringTag]:"Float64Array";}interface ArrayConstructor{readonly [Symbol.species]:ArrayConstructor;}interface MapConstructor{readonly [Symbol.species]:MapConstructor;}interface SetConstructor{readonly [Symbol.species]:SetConstructor;}interface ArrayBufferConstructor{readonly [Symbol.species]:ArrayBufferConstructor;}`
};