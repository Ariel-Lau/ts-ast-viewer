export default {
    fileName: `/lib.esnext.bigint.d.ts`,
    // File text is copyright Microsoft Corporation and is distributed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)
    text: `/// <reference no-default-lib="true"/>\ninterface BigInt{/**\n * Returns a string representation of an object.\n * @param radix Specifies a radix for converting numeric values to strings.\n */toString(radix?:number ):string ;/** Returns a string representation appropriate to the host environment's current locale. */toLocaleString():string ;/** Returns the primitive value of the specified object. */valueOf():bigint ;readonly [Symbol.toStringTag]:"BigInt";}interface BigIntConstructor{(value?:any ):bigint ;readonly prototype:BigInt;/**\n * Interprets the low bits of a BigInt as a 2's-complement signed integer.\n * All higher bits are discarded.\n * @param bits The number of low bits to use\n * @param int The BigInt whose bits to extract\n */asIntN(bits:number ,int:bigint ):bigint ;/**\n * Interprets the low bits of a BigInt as an unsigned integer.\n * All higher bits are discarded.\n * @param bits The number of low bits to use\n * @param int The BigInt whose bits to extract\n */asUintN(bits:number ,int:bigint ):bigint ;}declare const BigInt:BigIntConstructor;/**\n * A typed array of 64-bit signed integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated, an exception is raised.\n */interface BigInt64Array{/** The size in bytes of each element in the array. */readonly BYTES_PER_ELEMENT:number ;/** The ArrayBuffer instance referenced by the array. */readonly buffer:ArrayBufferLike;/** The length in bytes of the array. */readonly byteLength:number ;/** The offset in bytes of the array. */readonly byteOffset:number ;/**\n * Returns the this object after copying a section of the array identified by start and end\n * to the same array starting at position target\n * @param target If target is negative, it is treated as length+target where length is the\n * length of the array.\n * @param start If start is negative, it is treated as length+start. If end is negative, it\n * is treated as length+end.\n * @param end If not specified, length of the this object is used as its default value.\n */copyWithin(target:number ,start:number ,end?:number ):this ;/** Yields index, value pairs for every entry in the array. */entries():IterableIterator<[number ,bigint ]>;/**\n * Determines whether all the members of an array satisfy the specified test.\n * @param callbackfn A function that accepts up to three arguments. The every method calls\n * the callbackfn function for each element in the array until the callbackfn returns false,\n * or until the end of the array.\n * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n * If thisArg is omitted, undefined is used as the this value.\n */every(callbackfn:(value:bigint ,index:number ,array:BigInt64Array)=>boolean ,thisArg?:any ):boolean ;/**\n * Returns the this object after filling the section identified by start and end with value\n * @param value value to fill array section with\n * @param start index to start filling the array at. If start is negative, it is treated as\n * length+start where length is the length of the array.\n * @param end index to stop filling the array at. If end is negative, it is treated as\n * length+end.\n */fill(value:bigint ,start?:number ,end?:number ):this ;/**\n * Returns the elements of an array that meet the condition specified in a callback function.\n * @param callbackfn A function that accepts up to three arguments. The filter method calls\n * the callbackfn function one time for each element in the array.\n * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n * If thisArg is omitted, undefined is used as the this value.\n */filter(callbackfn:(value:bigint ,index:number ,array:BigInt64Array)=>any ,thisArg?:any ):BigInt64Array;/**\n * Returns the value of the first element in the array where predicate is true, and undefined\n * otherwise.\n * @param predicate find calls predicate once for each element of the array, in ascending\n * order, until it finds one where predicate returns true. If such an element is found, find\n * immediately returns that element value. Otherwise, find returns undefined.\n * @param thisArg If provided, it will be used as the this value for each invocation of\n * predicate. If it is not provided, undefined is used instead.\n */find(predicate:(value:bigint ,index:number ,array:BigInt64Array)=>boolean ,thisArg?:any ):bigint |undefined ;/**\n * Returns the index of the first element in the array where predicate is true, and -1\n * otherwise.\n * @param predicate find calls predicate once for each element of the array, in ascending\n * order, until it finds one where predicate returns true. If such an element is found,\n * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n * @param thisArg If provided, it will be used as the this value for each invocation of\n * predicate. If it is not provided, undefined is used instead.\n */findIndex(predicate:(value:bigint ,index:number ,array:BigInt64Array)=>boolean ,thisArg?:any ):number ;/**\n * Performs the specified action for each element in an array.\n * @param callbackfn A function that accepts up to three arguments. forEach calls the\n * callbackfn function one time for each element in the array.\n * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n * If thisArg is omitted, undefined is used as the this value.\n */forEach(callbackfn:(value:bigint ,index:number ,array:BigInt64Array)=>void ,thisArg?:any ):void ;/**\n * Determines whether an array includes a certain element, returning true or false as appropriate.\n * @param searchElement The element to search for.\n * @param fromIndex The position in this array at which to begin searching for searchElement.\n */includes(searchElement:bigint ,fromIndex?:number ):boolean ;/**\n * Returns the index of the first occurrence of a value in an array.\n * @param searchElement The value to locate in the array.\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n * search starts at index 0.\n */indexOf(searchElement:bigint ,fromIndex?:number ):number ;/**\n * Adds all the elements of an array separated by the specified separator string.\n * @param separator A string used to separate one element of an array from the next in the\n * resulting String. If omitted, the array elements are separated with a comma.\n */join(separator?:string ):string ;/** Yields each index in the array. */keys():IterableIterator<number >;/**\n * Returns the index of the last occurrence of a value in an array.\n * @param searchElement The value to locate in the array.\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n * search starts at index 0.\n */lastIndexOf(searchElement:bigint ,fromIndex?:number ):number ;/** The length of the array. */readonly length:number ;/**\n * Calls a defined callback function on each element of an array, and returns an array that\n * contains the results.\n * @param callbackfn A function that accepts up to three arguments. The map method calls the\n * callbackfn function one time for each element in the array.\n * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n * If thisArg is omitted, undefined is used as the this value.\n */map(callbackfn:(value:bigint ,index:number ,array:BigInt64Array)=>bigint ,thisArg?:any ):BigInt64Array;/**\n * Calls the specified callback function for all the elements in an array. The return value of\n * the callback function is the accumulated result, and is provided as an argument in the next\n * call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n * callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an argument\n * instead of an array value.\n */reduce(callbackfn:(previousValue:bigint ,currentValue:bigint ,currentIndex:number ,array:BigInt64Array)=>bigint ):bigint ;/**\n * Calls the specified callback function for all the elements in an array. The return value of\n * the callback function is the accumulated result, and is provided as an argument in the next\n * call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n * callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an argument\n * instead of an array value.\n */reduce<U>(callbackfn:(previousValue:U,currentValue:bigint ,currentIndex:number ,array:BigInt64Array)=>U,initialValue:U):U;/**\n * Calls the specified callback function for all the elements in an array, in descending order.\n * The return value of the callback function is the accumulated result, and is provided as an\n * argument in the next call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n * the callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an\n * argument instead of an array value.\n */reduceRight(callbackfn:(previousValue:bigint ,currentValue:bigint ,currentIndex:number ,array:BigInt64Array)=>bigint ):bigint ;/**\n * Calls the specified callback function for all the elements in an array, in descending order.\n * The return value of the callback function is the accumulated result, and is provided as an\n * argument in the next call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n * the callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an argument\n * instead of an array value.\n */reduceRight<U>(callbackfn:(previousValue:U,currentValue:bigint ,currentIndex:number ,array:BigInt64Array)=>U,initialValue:U):U;/** Reverses the elements in the array. */reverse():this ;/**\n * Sets a value or an array of values.\n * @param array A typed or untyped array of values to set.\n * @param offset The index in the current array at which the values are to be written.\n */set (array:ArrayLike<bigint >,offset?:number ):void ;/**\n * Returns a section of an array.\n * @param start The beginning of the specified portion of the array.\n * @param end The end of the specified portion of the array.\n */slice(start?:number ,end?:number ):BigInt64Array;/**\n * Determines whether the specified callback function returns true for any element of an array.\n * @param callbackfn A function that accepts up to three arguments. The some method calls the\n * callbackfn function for each element in the array until the callbackfn returns true, or until\n * the end of the array.\n * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n * If thisArg is omitted, undefined is used as the this value.\n */some(callbackfn:(value:bigint ,index:number ,array:BigInt64Array)=>boolean ,thisArg?:any ):boolean ;/**\n * Sorts the array.\n * @param compareFn The function used to determine the order of the elements. If omitted, the elements are sorted in ascending order.\n */sort(compareFn?:(a:bigint ,b:bigint )=>number |bigint ):this ;/**\n * Gets a new BigInt64Array view of the ArrayBuffer store for this array, referencing the elements\n * at begin, inclusive, up to end, exclusive.\n * @param begin The index of the beginning of the array.\n * @param end The index of the end of the array.\n */subarray(begin:number ,end?:number ):BigInt64Array;/** Converts the array to a string by using the current locale. */toLocaleString():string ;/** Returns a string representation of the array. */toString():string ;/** Yields each value in the array. */values():IterableIterator<bigint >;[Symbol.iterator]():IterableIterator<bigint >;readonly [Symbol.toStringTag]:"BigInt64Array";[index:number ]:bigint ;}interface BigInt64ArrayConstructor{readonly prototype:BigInt64Array;new (length?:number ):BigInt64Array;new (array:Iterable<bigint >):BigInt64Array;new (buffer:ArrayBufferLike,byteOffset?:number ,length?:number ):BigInt64Array;/** The size in bytes of each element in the array. */readonly BYTES_PER_ELEMENT:number ;/**\n * Returns a new array from a set of elements.\n * @param items A set of elements to include in the new array object.\n */of (...items:bigint []):BigInt64Array;/**\n * Creates an array from an array-like or iterable object.\n * @param arrayLike An array-like or iterable object to convert to an array.\n * @param mapfn A mapping function to call on every element of the array.\n * @param thisArg Value of 'this' used to invoke the mapfn.\n */from (arrayLike:ArrayLike<bigint >):BigInt64Array;from <U>(arrayLike:ArrayLike<U>,mapfn:(v:U,k:number )=>bigint ,thisArg?:any ):BigInt64Array;}declare const BigInt64Array:BigInt64ArrayConstructor;/**\n * A typed array of 64-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated, an exception is raised.\n */interface BigUint64Array{/** The size in bytes of each element in the array. */readonly BYTES_PER_ELEMENT:number ;/** The ArrayBuffer instance referenced by the array. */readonly buffer:ArrayBufferLike;/** The length in bytes of the array. */readonly byteLength:number ;/** The offset in bytes of the array. */readonly byteOffset:number ;/**\n * Returns the this object after copying a section of the array identified by start and end\n * to the same array starting at position target\n * @param target If target is negative, it is treated as length+target where length is the\n * length of the array.\n * @param start If start is negative, it is treated as length+start. If end is negative, it\n * is treated as length+end.\n * @param end If not specified, length of the this object is used as its default value.\n */copyWithin(target:number ,start:number ,end?:number ):this ;/** Yields index, value pairs for every entry in the array. */entries():IterableIterator<[number ,bigint ]>;/**\n * Determines whether all the members of an array satisfy the specified test.\n * @param callbackfn A function that accepts up to three arguments. The every method calls\n * the callbackfn function for each element in the array until the callbackfn returns false,\n * or until the end of the array.\n * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n * If thisArg is omitted, undefined is used as the this value.\n */every(callbackfn:(value:bigint ,index:number ,array:BigUint64Array)=>boolean ,thisArg?:any ):boolean ;/**\n * Returns the this object after filling the section identified by start and end with value\n * @param value value to fill array section with\n * @param start index to start filling the array at. If start is negative, it is treated as\n * length+start where length is the length of the array.\n * @param end index to stop filling the array at. If end is negative, it is treated as\n * length+end.\n */fill(value:bigint ,start?:number ,end?:number ):this ;/**\n * Returns the elements of an array that meet the condition specified in a callback function.\n * @param callbackfn A function that accepts up to three arguments. The filter method calls\n * the callbackfn function one time for each element in the array.\n * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n * If thisArg is omitted, undefined is used as the this value.\n */filter(callbackfn:(value:bigint ,index:number ,array:BigUint64Array)=>any ,thisArg?:any ):BigUint64Array;/**\n * Returns the value of the first element in the array where predicate is true, and undefined\n * otherwise.\n * @param predicate find calls predicate once for each element of the array, in ascending\n * order, until it finds one where predicate returns true. If such an element is found, find\n * immediately returns that element value. Otherwise, find returns undefined.\n * @param thisArg If provided, it will be used as the this value for each invocation of\n * predicate. If it is not provided, undefined is used instead.\n */find(predicate:(value:bigint ,index:number ,array:BigUint64Array)=>boolean ,thisArg?:any ):bigint |undefined ;/**\n * Returns the index of the first element in the array where predicate is true, and -1\n * otherwise.\n * @param predicate find calls predicate once for each element of the array, in ascending\n * order, until it finds one where predicate returns true. If such an element is found,\n * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n * @param thisArg If provided, it will be used as the this value for each invocation of\n * predicate. If it is not provided, undefined is used instead.\n */findIndex(predicate:(value:bigint ,index:number ,array:BigUint64Array)=>boolean ,thisArg?:any ):number ;/**\n * Performs the specified action for each element in an array.\n * @param callbackfn A function that accepts up to three arguments. forEach calls the\n * callbackfn function one time for each element in the array.\n * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n * If thisArg is omitted, undefined is used as the this value.\n */forEach(callbackfn:(value:bigint ,index:number ,array:BigUint64Array)=>void ,thisArg?:any ):void ;/**\n * Determines whether an array includes a certain element, returning true or false as appropriate.\n * @param searchElement The element to search for.\n * @param fromIndex The position in this array at which to begin searching for searchElement.\n */includes(searchElement:bigint ,fromIndex?:number ):boolean ;/**\n * Returns the index of the first occurrence of a value in an array.\n * @param searchElement The value to locate in the array.\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n * search starts at index 0.\n */indexOf(searchElement:bigint ,fromIndex?:number ):number ;/**\n * Adds all the elements of an array separated by the specified separator string.\n * @param separator A string used to separate one element of an array from the next in the\n * resulting String. If omitted, the array elements are separated with a comma.\n */join(separator?:string ):string ;/** Yields each index in the array. */keys():IterableIterator<number >;/**\n * Returns the index of the last occurrence of a value in an array.\n * @param searchElement The value to locate in the array.\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n * search starts at index 0.\n */lastIndexOf(searchElement:bigint ,fromIndex?:number ):number ;/** The length of the array. */readonly length:number ;/**\n * Calls a defined callback function on each element of an array, and returns an array that\n * contains the results.\n * @param callbackfn A function that accepts up to three arguments. The map method calls the\n * callbackfn function one time for each element in the array.\n * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n * If thisArg is omitted, undefined is used as the this value.\n */map(callbackfn:(value:bigint ,index:number ,array:BigUint64Array)=>bigint ,thisArg?:any ):BigUint64Array;/**\n * Calls the specified callback function for all the elements in an array. The return value of\n * the callback function is the accumulated result, and is provided as an argument in the next\n * call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n * callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an argument\n * instead of an array value.\n */reduce(callbackfn:(previousValue:bigint ,currentValue:bigint ,currentIndex:number ,array:BigUint64Array)=>bigint ):bigint ;/**\n * Calls the specified callback function for all the elements in an array. The return value of\n * the callback function is the accumulated result, and is provided as an argument in the next\n * call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n * callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an argument\n * instead of an array value.\n */reduce<U>(callbackfn:(previousValue:U,currentValue:bigint ,currentIndex:number ,array:BigUint64Array)=>U,initialValue:U):U;/**\n * Calls the specified callback function for all the elements in an array, in descending order.\n * The return value of the callback function is the accumulated result, and is provided as an\n * argument in the next call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n * the callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an\n * argument instead of an array value.\n */reduceRight(callbackfn:(previousValue:bigint ,currentValue:bigint ,currentIndex:number ,array:BigUint64Array)=>bigint ):bigint ;/**\n * Calls the specified callback function for all the elements in an array, in descending order.\n * The return value of the callback function is the accumulated result, and is provided as an\n * argument in the next call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n * the callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an argument\n * instead of an array value.\n */reduceRight<U>(callbackfn:(previousValue:U,currentValue:bigint ,currentIndex:number ,array:BigUint64Array)=>U,initialValue:U):U;/** Reverses the elements in the array. */reverse():this ;/**\n * Sets a value or an array of values.\n * @param array A typed or untyped array of values to set.\n * @param offset The index in the current array at which the values are to be written.\n */set (array:ArrayLike<bigint >,offset?:number ):void ;/**\n * Returns a section of an array.\n * @param start The beginning of the specified portion of the array.\n * @param end The end of the specified portion of the array.\n */slice(start?:number ,end?:number ):BigUint64Array;/**\n * Determines whether the specified callback function returns true for any element of an array.\n * @param callbackfn A function that accepts up to three arguments. The some method calls the\n * callbackfn function for each element in the array until the callbackfn returns true, or until\n * the end of the array.\n * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n * If thisArg is omitted, undefined is used as the this value.\n */some(callbackfn:(value:bigint ,index:number ,array:BigUint64Array)=>boolean ,thisArg?:any ):boolean ;/**\n * Sorts the array.\n * @param compareFn The function used to determine the order of the elements. If omitted, the elements are sorted in ascending order.\n */sort(compareFn?:(a:bigint ,b:bigint )=>number |bigint ):this ;/**\n * Gets a new BigUint64Array view of the ArrayBuffer store for this array, referencing the elements\n * at begin, inclusive, up to end, exclusive.\n * @param begin The index of the beginning of the array.\n * @param end The index of the end of the array.\n */subarray(begin:number ,end?:number ):BigUint64Array;/** Converts the array to a string by using the current locale. */toLocaleString():string ;/** Returns a string representation of the array. */toString():string ;/** Yields each value in the array. */values():IterableIterator<bigint >;[Symbol.iterator]():IterableIterator<bigint >;readonly [Symbol.toStringTag]:"BigUint64Array";[index:number ]:bigint ;}interface BigUint64ArrayConstructor{readonly prototype:BigUint64Array;new (length?:number ):BigUint64Array;new (array:Iterable<bigint >):BigUint64Array;new (buffer:ArrayBufferLike,byteOffset?:number ,length?:number ):BigUint64Array;/** The size in bytes of each element in the array. */readonly BYTES_PER_ELEMENT:number ;/**\n * Returns a new array from a set of elements.\n * @param items A set of elements to include in the new array object.\n */of (...items:bigint []):BigUint64Array;/**\n * Creates an array from an array-like or iterable object.\n * @param arrayLike An array-like or iterable object to convert to an array.\n * @param mapfn A mapping function to call on every element of the array.\n * @param thisArg Value of 'this' used to invoke the mapfn.\n */from (arrayLike:ArrayLike<bigint >):BigUint64Array;from <U>(arrayLike:ArrayLike<U>,mapfn:(v:U,k:number )=>bigint ,thisArg?:any ):BigUint64Array;}declare const BigUint64Array:BigUint64ArrayConstructor;interface DataView{/**\n * Gets the BigInt64 value at the specified byte offset from the start of the view. There is\n * no alignment constraint; multi-byte values may be fetched from any offset.\n * @param byteOffset The place in the buffer at which the value should be retrieved.\n */getBigInt64(byteOffset:number ,littleEndian?:boolean ):bigint ;/**\n * Gets the BigUint64 value at the specified byte offset from the start of the view. There is\n * no alignment constraint; multi-byte values may be fetched from any offset.\n * @param byteOffset The place in the buffer at which the value should be retrieved.\n */getBigUint64(byteOffset:number ,littleEndian?:boolean ):bigint ;/**\n * Stores a BigInt64 value at the specified byte offset from the start of the view.\n * @param byteOffset The place in the buffer at which the value should be set.\n * @param value The value to set.\n * @param littleEndian If false or undefined, a big-endian value should be written,\n * otherwise a little-endian value should be written.\n */setBigInt64(byteOffset:number ,value:bigint ,littleEndian?:boolean ):void ;/**\n * Stores a BigUint64 value at the specified byte offset from the start of the view.\n * @param byteOffset The place in the buffer at which the value should be set.\n * @param value The value to set.\n * @param littleEndian If false or undefined, a big-endian value should be written,\n * otherwise a little-endian value should be written.\n */setBigUint64(byteOffset:number ,value:bigint ,littleEndian?:boolean ):void ;}`
};